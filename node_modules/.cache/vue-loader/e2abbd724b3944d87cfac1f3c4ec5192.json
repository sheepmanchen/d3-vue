{"remainingRequest":"/Users/sheepman/Github/d3-vue-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sheepman/Github/d3-vue-example/src/components/BarChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sheepman/Github/d3-vue-example/src/components/BarChart.vue","mtime":1556964218714},{"path":"/Users/sheepman/Github/d3-vue-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sheepman/Github/d3-vue-example/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/sheepman/Github/d3-vue-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sheepman/Github/d3-vue-example/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\nimport * as d3 from \"d3\";\n\nexport default {\n    mounted() {\n        this.testDraw();\n    },\n    created() {\n        // this.getlinear();\n    },\n    methods: {\n         testDraw(){\n             var margin = {top:50, right: 50, bottom: 50, left:150};\n             // var width = parseInt(d3.select('body').style('width'), 10) - margin.left - margin.right;\n             var width = 600 - margin.left - margin.right;\n             // var height = parseInt(d3.select('body').style('height'), 10) - margin.top - margin.bottom;\n             var height = 300 - margin.top - margin.bottom;\n             let buttonYears = [2015, 2016, 2017, 2018];\n\n             // var div = d3.select(\"body\").append(\"div\").attr(\"class\", \"toolTip\");\n\n             var svg = d3.select(\"body\")\n                 .append(\"div\")\n                 .attr(\"class\",\"outbox\")\n                 .style(\"float\", \"left\")\n                 .style(\"display\", \"inline\")\n                 .style(\"width\", \"50%\");\n                 // .style(\"height\", \"500px\");\n\n                 // .attr(\"class\",\"custom-card header-card card highlights-item col-md-12 col-sm-12 col-xs-12 border-top\");\n\n             var div = svg.append(\"div\").attr(\"class\",\"toolTip\");\n\n             svg =  svg.append(\"svg\")\n                 .attr(\"width\", width + margin.left + margin.right)\n                 .attr(\"height\", height + margin.bottom + margin.top)\n                 .append(\"g\")\n                 .attr(\"transform\",\"translate(\" + margin.left +\",\"+margin.top+\")\");\n\n             // var form = d3.select(\"#myform\").style(\"transform\",\"translate(150px, 30px)\");\n             let year = 2015;\n\n             let playButton = d3.select(\".outbox\").append(\"div\")\n                 .attr(\"class\", \"play-button button\")\n                 .style(\"transform\",\"translate(10px,10px)\")\n                 .text(\"PLAY!\")\n                 .style(\"transform\",\"translate(\" + 20 +\"px ,\"+ 20 +\"px)\");\n\n             let buttonContainer = d3.select(\".outbox\").append(\"div\").attr(\"class\", \"container\")\n                 .style(\"width\", \"500px\")\n                 .style(\"height\", \"50px\")\n                 .style(\"transform\",\"translate(\" + 10 +\"px ,\"+ 10 +\"px)\");\n\n\n             let buttons = buttonContainer.selectAll(\"div\")\n                 .data(buttonYears)\n                 .enter()\n                 .append(\"div\")\n                 .text(function(d){return d;})\n                 .attr(\"class\", function(d){\n                     if(d===year){\n                         return \"myButton selected\";\n                     }\n                     else{\n                         return \"myButton\";\n                     }\n                 })\n                 .attr(\"value\", function(d){return d;});\n\n             var playInterval;\n             buttons.on(\"click\", function(d){\n                 // d3.select(\".selected\").classed(\"selected\",false);\n                 // d3.select(this).classed(\"selected\", true);\n                 clearInterval(playInterval);\n                 year = d;\n                 update(year);\n                 // changeYear();\n             });\n\n             playButton.on(\"click\", function(){\n                 var i = 0;\n                 playInterval = setInterval(function(){\n                     update(buttonYears[i]);\n                     console.log(buttonYears[i]);\n                     i++;\n                     if(i>buttonYears.length-1){\n                         clearInterval(playInterval);\n                     }\n                 }, 1000);\n             });\n\n\n             var xScale = d3.scaleLinear().range([0,width]);\n             var yScale = d3.scaleBand().range([0, height]).padding(0.2);\n\n             // d3.select(\"input[value=\\\"2016\\\"]\").property(\"checked\", true);\n             changeYear();\n\n             function update(updateYear){\n\n                 d3.select(\".selected\").classed(\"selected\", false);\n                 buttons.filter(function(d){\n                     return d==updateYear;\n                 }).classed(\"selected\", true);\n\n                 year = updateYear;\n                 changeYear();\n\n             }\n\n             function changeYear() {\n                 // var bar = svg.selectAll(\".bar\");\n                 // bar.remove();\n                 // svg.remove()\n\n                 let dataSet;\n                 d3.csv(\"department_change.csv\").then(function (data) {\n                     //\n                     console.log(data);\n                     dataSet = data.filter(function (e) {\n                         return parseInt(e.year) == parseInt(year);\n                     });\n                     // fDta=data.filter(function(e){return e.dpt===\"Mathematics\"});\n                     console.log(dataSet);\n                     dataSet.sort(function (x, y) {\n                         return d3.ascending(parseInt(y.totalNum), parseInt(x.totalNum));\n                     });\n                     // dataSet.forEach(function (d) {\n                         // d.deparment = d.department;\n                         //  d.totalNum = parseInt(d.totoalNum);\n                         //     const xValue = parseInt(d.tv);\n                         //     const yValue = d.dpt;\n                     // });\n\n                     const xValue = dataSet => parseInt(dataSet.totalNum);\n                     const yValue = dataSet => dataSet.department;\n\n                     xScale.domain([0, d3.max(dataSet, xValue)]);\n                     yScale.domain(dataSet.map(yValue));\n\n\n                     svg.select(\".y.axis\").remove();\n                     svg.select(\".x.axis\").remove();\n                     // svg.selectAll(\".temp-g\").remove();\n                     // svg.select(\".temp-svg\").remove();\n                     // svg.selectAll(\".text-g\").remove();\n                     // svg.selectAll(\".bar\").remove();\n\n                     svg.selectAll(\".text-value\").remove();\n\n                     let xAxis = d3.axisBottom(xScale);\n                     let yAxis = d3.axisLeft(yScale);\n\n                     svg.append(\"g\")\n                         .attr(\"class\", \"x axis\")\n                         .attr(\"transform\", \"translate(0,\" + height + \")\")\n                         .call(xAxis);\n\n                     svg.append(\"g\")\n                         .attr(\"class\", \"y axis\")\n                         .call(yAxis);\n\n                     svg.selectAll(\".x.axis\")\n                         .call(d3.axisBottom(xScale));\n\n                     svg.selectAll(\".y.axis\")\n                         .call(d3.axisLeft(yScale))\n                         .attr(\"opacity\", '0')\n                         .transition()\n                         .duration(100)\n                         .attr(\"opacity\", '1');\n\n\n                     var bars = svg.selectAll(\".bar\").data(dataSet);\n                     bars = bars.enter().append(\"g\").attr(\"class\", \"temp-g\");\n                     // bars.exit()\n                     //     .remove();\n\n\n                     // bars = svg.selectAll(\".bar\");\n                     bars.append(\"rect\")\n                         .attr(\"class\", \"bar\")\n                         // .enter()\n                         // bar.enter()\n                         .attr(\"y\", d => yScale(yValue(d)))\n                         .attr(\"x\", 0)\n                         .attr(\"width\", function (d) {\n                             return d.totalNum;\n                         });\n                     // .attr(\"width\",d => xScale(xValue(d)))\n\n                     bars = svg.selectAll(\".temp-g\").data(dataSet);\n                     var barText = bars.append(\"text\")\n                         .transition()\n                         .duration(500)\n                         .ease(d3.easeLinear)\n                         .attr(\"class\", \"text-value\")\n                         .attr(\"x\", d => xScale(xValue(d)) - 15)\n                         .attr(\"y\", d => yScale(yValue(d)) + 5)\n                         .attr(\"dy\", \"1em\")\n                         .attr(\"text-anchor\", \"middle\")\n                         .attr(\"font-size\", \"14px\")\n                         .attr(\"fill\", \"lightyellow\")\n                         .attr(\"opacity\", '0')\n                         // .attr(\"transform\", function(d) { return \"translate(20, -20)\"; })\n                         .text(function (d) {\n                             return d.totalNum;\n                         });\n\n                     barText.transition()\n                         .duration(500).attr(\"opacity\", '1');\n\n                     bars.on(\"mousemove\", function (d) {\n                         div.style(\"left\", d3.event.pageX - 40 + \"px\");\n                         div.style(\"top\", d3.event.pageY - 45 + \"px\");\n                         div.style(\"display\", \"inline-block\");\n                         div.html((d.department) + \"<br>\" + (d.totalNum));\n\n                     });\n                     bars.on(\"mouseout\", function () {\n                         div.style(\"display\", \"none\");\n                     });\n\n                     // bar.exit();\n\n                     bars = svg.selectAll(\".bar\");\n                     // updated data:\n                     bars.transition()\n                         .duration(750)\n                         .ease(d3.easeLinear)\n                         .attr(\"y\", d => yScale(yValue(d)))\n                         .attr(\"x\", 0)\n                         .attr(\"width\", d => xScale(xValue(d)))\n                         .attr(\"height\", yScale.bandwidth());\n\n\n                 })\n             }\n\n        },\n\n    }\n};\n",{"version":3,"sources":["BarChart.vue"],"names":[],"mappings":";;;;;;;;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA","file":"BarChart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div id=\"mydiv\">\n\n    </div>\n</template>\n\n\n<script>\n    import * as d3 from \"d3\";\n\n    export default {\n        mounted() {\n            this.testDraw();\n        },\n        created() {\n            // this.getlinear();\n        },\n        methods: {\n             testDraw(){\n                 var margin = {top:50, right: 50, bottom: 50, left:150};\n                 // var width = parseInt(d3.select('body').style('width'), 10) - margin.left - margin.right;\n                 var width = 600 - margin.left - margin.right;\n                 // var height = parseInt(d3.select('body').style('height'), 10) - margin.top - margin.bottom;\n                 var height = 300 - margin.top - margin.bottom;\n                 let buttonYears = [2015, 2016, 2017, 2018];\n\n                 // var div = d3.select(\"body\").append(\"div\").attr(\"class\", \"toolTip\");\n\n                 var svg = d3.select(\"body\")\n                     .append(\"div\")\n                     .attr(\"class\",\"outbox\")\n                     .style(\"float\", \"left\")\n                     .style(\"display\", \"inline\")\n                     .style(\"width\", \"50%\");\n                     // .style(\"height\", \"500px\");\n\n                     // .attr(\"class\",\"custom-card header-card card highlights-item col-md-12 col-sm-12 col-xs-12 border-top\");\n\n                 var div = svg.append(\"div\").attr(\"class\",\"toolTip\");\n\n                 svg =  svg.append(\"svg\")\n                     .attr(\"width\", width + margin.left + margin.right)\n                     .attr(\"height\", height + margin.bottom + margin.top)\n                     .append(\"g\")\n                     .attr(\"transform\",\"translate(\" + margin.left +\",\"+margin.top+\")\");\n\n                 // var form = d3.select(\"#myform\").style(\"transform\",\"translate(150px, 30px)\");\n                 let year = 2015;\n\n                 let playButton = d3.select(\".outbox\").append(\"div\")\n                     .attr(\"class\", \"play-button button\")\n                     .style(\"transform\",\"translate(10px,10px)\")\n                     .text(\"PLAY!\")\n                     .style(\"transform\",\"translate(\" + 20 +\"px ,\"+ 20 +\"px)\");\n\n                 let buttonContainer = d3.select(\".outbox\").append(\"div\").attr(\"class\", \"container\")\n                     .style(\"width\", \"500px\")\n                     .style(\"height\", \"50px\")\n                     .style(\"transform\",\"translate(\" + 10 +\"px ,\"+ 10 +\"px)\");\n\n\n                 let buttons = buttonContainer.selectAll(\"div\")\n                     .data(buttonYears)\n                     .enter()\n                     .append(\"div\")\n                     .text(function(d){return d;})\n                     .attr(\"class\", function(d){\n                         if(d===year){\n                             return \"myButton selected\";\n                         }\n                         else{\n                             return \"myButton\";\n                         }\n                     })\n                     .attr(\"value\", function(d){return d;});\n\n                 var playInterval;\n                 buttons.on(\"click\", function(d){\n                     // d3.select(\".selected\").classed(\"selected\",false);\n                     // d3.select(this).classed(\"selected\", true);\n                     clearInterval(playInterval);\n                     year = d;\n                     update(year);\n                     // changeYear();\n                 });\n\n                 playButton.on(\"click\", function(){\n                     var i = 0;\n                     playInterval = setInterval(function(){\n                         update(buttonYears[i]);\n                         console.log(buttonYears[i]);\n                         i++;\n                         if(i>buttonYears.length-1){\n                             clearInterval(playInterval);\n                         }\n                     }, 1000);\n                 });\n\n\n                 var xScale = d3.scaleLinear().range([0,width]);\n                 var yScale = d3.scaleBand().range([0, height]).padding(0.2);\n\n                 // d3.select(\"input[value=\\\"2016\\\"]\").property(\"checked\", true);\n                 changeYear();\n\n                 function update(updateYear){\n\n                     d3.select(\".selected\").classed(\"selected\", false);\n                     buttons.filter(function(d){\n                         return d==updateYear;\n                     }).classed(\"selected\", true);\n\n                     year = updateYear;\n                     changeYear();\n\n                 }\n\n                 function changeYear() {\n                     // var bar = svg.selectAll(\".bar\");\n                     // bar.remove();\n                     // svg.remove()\n\n                     let dataSet;\n                     d3.csv(\"department_change.csv\").then(function (data) {\n                         //\n                         console.log(data);\n                         dataSet = data.filter(function (e) {\n                             return parseInt(e.year) == parseInt(year);\n                         });\n                         // fDta=data.filter(function(e){return e.dpt===\"Mathematics\"});\n                         console.log(dataSet);\n                         dataSet.sort(function (x, y) {\n                             return d3.ascending(parseInt(y.totalNum), parseInt(x.totalNum));\n                         });\n                         // dataSet.forEach(function (d) {\n                             // d.deparment = d.department;\n                             //  d.totalNum = parseInt(d.totoalNum);\n                             //     const xValue = parseInt(d.tv);\n                             //     const yValue = d.dpt;\n                         // });\n\n                         const xValue = dataSet => parseInt(dataSet.totalNum);\n                         const yValue = dataSet => dataSet.department;\n\n                         xScale.domain([0, d3.max(dataSet, xValue)]);\n                         yScale.domain(dataSet.map(yValue));\n\n\n                         svg.select(\".y.axis\").remove();\n                         svg.select(\".x.axis\").remove();\n                         // svg.selectAll(\".temp-g\").remove();\n                         // svg.select(\".temp-svg\").remove();\n                         // svg.selectAll(\".text-g\").remove();\n                         // svg.selectAll(\".bar\").remove();\n\n                         svg.selectAll(\".text-value\").remove();\n\n                         let xAxis = d3.axisBottom(xScale);\n                         let yAxis = d3.axisLeft(yScale);\n\n                         svg.append(\"g\")\n                             .attr(\"class\", \"x axis\")\n                             .attr(\"transform\", \"translate(0,\" + height + \")\")\n                             .call(xAxis);\n\n                         svg.append(\"g\")\n                             .attr(\"class\", \"y axis\")\n                             .call(yAxis);\n\n                         svg.selectAll(\".x.axis\")\n                             .call(d3.axisBottom(xScale));\n\n                         svg.selectAll(\".y.axis\")\n                             .call(d3.axisLeft(yScale))\n                             .attr(\"opacity\", '0')\n                             .transition()\n                             .duration(100)\n                             .attr(\"opacity\", '1');\n\n\n                         var bars = svg.selectAll(\".bar\").data(dataSet);\n                         bars = bars.enter().append(\"g\").attr(\"class\", \"temp-g\");\n                         // bars.exit()\n                         //     .remove();\n\n\n                         // bars = svg.selectAll(\".bar\");\n                         bars.append(\"rect\")\n                             .attr(\"class\", \"bar\")\n                             // .enter()\n                             // bar.enter()\n                             .attr(\"y\", d => yScale(yValue(d)))\n                             .attr(\"x\", 0)\n                             .attr(\"width\", function (d) {\n                                 return d.totalNum;\n                             });\n                         // .attr(\"width\",d => xScale(xValue(d)))\n\n                         bars = svg.selectAll(\".temp-g\").data(dataSet);\n                         var barText = bars.append(\"text\")\n                             .transition()\n                             .duration(500)\n                             .ease(d3.easeLinear)\n                             .attr(\"class\", \"text-value\")\n                             .attr(\"x\", d => xScale(xValue(d)) - 15)\n                             .attr(\"y\", d => yScale(yValue(d)) + 5)\n                             .attr(\"dy\", \"1em\")\n                             .attr(\"text-anchor\", \"middle\")\n                             .attr(\"font-size\", \"14px\")\n                             .attr(\"fill\", \"lightyellow\")\n                             .attr(\"opacity\", '0')\n                             // .attr(\"transform\", function(d) { return \"translate(20, -20)\"; })\n                             .text(function (d) {\n                                 return d.totalNum;\n                             });\n\n                         barText.transition()\n                             .duration(500).attr(\"opacity\", '1');\n\n                         bars.on(\"mousemove\", function (d) {\n                             div.style(\"left\", d3.event.pageX - 40 + \"px\");\n                             div.style(\"top\", d3.event.pageY - 45 + \"px\");\n                             div.style(\"display\", \"inline-block\");\n                             div.html((d.department) + \"<br>\" + (d.totalNum));\n\n                         });\n                         bars.on(\"mouseout\", function () {\n                             div.style(\"display\", \"none\");\n                         });\n\n                         // bar.exit();\n\n                         bars = svg.selectAll(\".bar\");\n                         // updated data:\n                         bars.transition()\n                             .duration(750)\n                             .ease(d3.easeLinear)\n                             .attr(\"y\", d => yScale(yValue(d)))\n                             .attr(\"x\", 0)\n                             .attr(\"width\", d => xScale(xValue(d)))\n                             .attr(\"height\", yScale.bandwidth());\n\n\n                     })\n                 }\n\n            },\n\n        }\n    };\n</script>\n\n\n<style>\n    .bar {\n        fill: steelblue;\n        fill-opacity: .5;\n\n    }\n\n    body {\n        font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        /*width: 600px;*/\n        /*height: 300px;*/\n        position: relative;\n    }\n    svg {\n        width: 100%;\n        height: 100%;\n        position: center;\n    }\n\n    /*path.slice{*/\n    /*stroke-width:2px;*/\n    /*}*/\n\n    text{\n        font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n    }\n\n    polyline{\n        opacity: .3;\n        stroke: black;\n        stroke-width: 2px;\n        fill: none;\n    }\n\n    label {\n        font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        font-weight: normal;\n    }\n\n    .toolTip {\n        font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        position: absolute;\n        display: none;\n        width: auto;\n        height: auto;\n        background: none repeat scroll 0 0 white;\n        border: 0 none;\n        border-radius: 8px 8px 8px 8px;\n        box-shadow: -3px 3px 15px #888888;\n        color: black;\n        font: 12px sans-serif;\n        padding: 5px;\n        text-align: center;\n    }\n\n    rect {\n        stroke-width: 2;\n    }\n\n\n\n    /*text.value{*/\n    /*font-size: 200%;*/\n    /*fill: white;*/\n    /*}*/\n    /**/\n    /*text.label{*/\n    /*font-size: 100%;*/\n    /*}*/\n\n    .axis text {\n        font: 14px sans-serif;\n    }\n\n    .axis path{\n        fill: none;\n        stroke: #000;\n    }\n\n    .axis line {\n        fill: none;\n        stroke: #000;\n        shape-rendering: crispEdges;\n    }\n\n    .axis .tick line {\n        stroke-width: 1;\n        stroke: rgba(0, 0, 0, 0.2);\n    }\n\n    .axisHorizontal path{\n        fill: none;\n    }\n\n    .axisHorizontal line {\n        fill: none;\n        stroke: #000;\n        shape-rendering: crispEdges;\n    }\n\n    .axisHorizontal .tick line {\n        stroke-width: 1;\n        stroke: rgba(0, 0, 0, 0.2);\n    }\n\n    .container{\n        /*width: 1000px;*/\n        margin-bottom: 15px;\n        margin-top: 10px;\n        margin-left: 80px;\n        /*background: antiquewhite;*/\n        overflow-x:hidden;\n        overflow-y:hidden;\n    }\n    .myButton{\n        float: left;\n        margin-left: 30px;\n        font-size: 14px;\n        height: 30px;\n        font-weight: lighter;\n        cursor: pointer;\n\n    }\n\n    .play-button {\n    position: absolute;\n    text-align: center;\n    text-align-all: center;\n    /*top: 140px;*/\n    /*left: 50px;*/\n    font-size: 14px;\n    background: #f08080;\n    /*padding-right: 26px;*/\n    border-radius: 3px;\n    border: none;\n    color: white;\n    margin: 0;\n    padding: 0 12px;\n    /*width: 60px;*/\n    cursor: pointer;\n    /*height: 30px;*/\n    }\n\n    /*.selected{*/\n        /*background:-webkit-gradient(linear, left top, left bottom, color-stop(0.05, #80b5ea), color-stop(1, #bddbfa));*/\n        /*background:-moz-linear-gradient(top, #80b5ea 5%, #bddbfa 100%);*/\n        /*background:-webkit-linear-gradient(top, #80b5ea 5%, #bddbfa 100%);*/\n        /*background:-o-linear-gradient(top, #80b5ea 5%, #bddbfa 100%);*/\n        /*background:-ms-linear-gradient(top, #80b5ea 5%, #bddbfa 100%);*/\n        /*background:linear-gradient(to bottom, #80b5ea 5%, #bddbfa 100%);*/\n        /*filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#80b5ea', endColorstr='#bddbfa',GradientType=0);*/\n        /*background-color:#80b5ea;    }*/\n    /*form {*/\n    /*transform: translate(150px, 150px);*/\n    /*}*/\n    /*label {*/\n    /*transform: translate(150px, 150px);*/\n    /*}*/\n</style>"]}]}